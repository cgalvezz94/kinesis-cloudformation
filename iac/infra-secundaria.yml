AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infraestructura base para streaming con Kinesis + Lambda + Timestream'
Parameters:
  StreamName:
    Type: String
    Default: 'binance-trades-v3'
    Description: 'The name of the Kinesis stream.'
  StreamMode:
    Type: String
    Default: 'ON_DEMAND'
    AllowedValues:
      - PROVISIONED
      - ON_DEMAND
    Description: 'The mode of the Kinesis stream.'
  RetentionPeriodHours:
    Type: Number
    Default: "24"
    Description: 'The retention period for the Kinesis stream in hours.'
  MetricsOption:
    Type: String
    Default: 'ALL'
    AllowedValues:
      - ALL
      - NONE
    Description: 'The metrics option for the Kinesis stream.'
  Project:
    Type: String
    Default: 'kinesis-project'
    Description: 'The project name.'


Resources:

  ### ðŸ”¹ Kinesis Stream
  DataStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Ref StreamName
      RetentionPeriodHours: !Ref RetentionPeriodHours
      StreamModeDetails:
        StreamMode: !Ref StreamMode



  ### ðŸ”¹ Lambda Function (placeholder)
  StreamProcessorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: StreamProcessor
      Runtime: python3.9
      Handler: app.lambda_handlers.kinesis_to_timestream.lambda_handler
      Role: !ImportValue LambdaExecutionRoleArn
      Code:
        S3Bucket: !ImportValue LambdaS3BucketName
        S3Key: kinesis_to_timestream.zip

  ### ðŸ”¹ Event Source Mapping (Kinesis â†’ Lambda)
  LambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt DataStream.Arn
      FunctionName: !Ref StreamProcessorLambda
      StartingPosition: LATEST
  
  ### ðŸ”¹ Timestream Database
  # BinanceTradesDB:
  #  Type: AWS::Timestream::Database
  #  Properties:
  #    DatabaseName: !Sub "${Project}-trades-db"

  ### ðŸ”¹ Timestream Table
  #BinanceTradesTimestreamTable:
  #  Type: AWS::Timestream::Table
  #  Properties:
  #    DatabaseName: !Ref BinanceTradesDB
  #    TableName: trades
  
  ### ðŸ”¹ Grafana Workspace
  ManagedGrafanaWorkspace:
    Type: AWS::Grafana::Workspace
    Properties:
      AccountAccessType: CURRENT_ACCOUNT
      AuthenticationProviders:
        - AWS_SSO
      PermissionType: SERVICE_MANAGED
      Name: !Sub "${Project}-grafana"
      RoleArn: !ImportValue GrafanaRoleArn

  BinanceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: binance-task
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !ImportValue BinanceTaskExecutionRoleArn
      ContainerDefinitions:
        - Name: binance-container
          Image: public.ecr.aws/l1v8h9k1/binance-trades:latest
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !ImportValue BinanceLogGroupName
              awslogs-region: us-east-1
              awslogs-stream-prefix: binance

  BinanceService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !ImportValue BinanceClusterName
      LaunchType: FARGATE
      DesiredCount: 0
      TaskDefinition: !Ref BinanceTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !ImportValue BinancePublicSubnetId
          SecurityGroups:
            - !ImportValue BinanceSecurityGroupId