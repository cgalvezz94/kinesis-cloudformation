name: CI/CD Pipeline

permissions:
    id-token: write
    contents: read

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  ### ðŸ”¹ CI: Testing & Validation
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest flake8

      - name: Run Linter
        run: |
          flake8 app/ --max-line-length=100

      #- name: Run Unit Tests
      #  run: |
      #    pytest app/tests/ --disable-warnings -q

  ### ðŸ”¹ CD: Deploy Infra + Lambda Code
  cd:
    needs: ci   # <- CD solo corre si CI pasa
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::302263066270:role/streaming-data-crypto
          aws-region: us-east-1

      - name: Set dynamic bucket name
        id: bucket
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "BUCKET_NAME=mi-bucket-lambdas-$ACCOUNT_ID" >> $GITHUB_ENV

      - name: List repo files
        run: ls -R

      - name: Validate CloudFormation 1
        run: |
          aws cloudformation validate-template --template-body "$(cat iac/infra-basica.yml)"

      - name: Validate CloudFormation 2
        run: |
          aws cloudformation validate-template --template-body "$(cat iac/infra-secundaria.yml)"

      - name: Handle basic-infra ROLLBACK_COMPLETE
        run: |
          STACK_NAME=basic-infra
          STATUS=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query "Stacks[0].StackStatus" \
            --output text 2>&1 || echo "NOT_FOUND")

          echo "Estado actual del stack: $STATUS"

          if [[ "$STATUS" == *"ROLLBACK_COMPLETE"* || "$STATUS" == *"ROLLBACK_FAILED"* || "$STATUS" == *"UPDATE_ROLLBACK_COMPLETE"*  ]]; then
          echo "Eliminando stack $STACK_NAME en estado $STATUS ..."
          aws cloudformation delete-stack --stack-name $STACK_NAME
          echo "Esperando que el stack se elimine..."
          aws cloudformation wait stack-delete-complete --stack-name $STACK_NAME
          echo "Stack eliminado"
          fi


      - name: Deploy CloudFormation Stack 1
        run: |
          aws cloudformation deploy \
            --template-file iac/infra-basica.yml \
            --stack-name basic-infra \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides BucketName=$BUCKET_NAME

      - name: Wait for S3 bucket to exist
        run: |
          echo "Esperando a que el bucket $BUCKET_NAME exista..."
          aws s3api wait bucket-exists --bucket $BUCKET_NAME
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt -t package/
          cp app/lambda_handlers/kinesis_to_timestream.py package/

      - name: Package Lambda Code
        run: |
          zip -r kinesis_timestream.zip package/

      - name: Validate package contents
        run: |
          unzip -l kinesis_timestream.zip

      - name: Upload Lambda Package to S3
        run: |
          aws s3 cp kinesis_timestream.zip s3://$BUCKET_NAME/kinesis_timestream.zip

      - name: Login to Amazon ECR Public
        run: |
          aws ecr-public get-login-password --region us-east-1 \
          | docker login --username AWS --password-stdin public.ecr.aws

      - name: Build Docker image
        run: docker build -t binance-trades .

      - name: Tag Docker image
        run: docker tag binance-trades:latest public.ecr.aws/l1v8h9k1/binance-trades:latest

      - name: Push Docker image to ECR Public
        run: docker push public.ecr.aws/l1v8h9k1/binance-trades:latest

      - name: Handle real-time-stack ROLLBACK_COMPLETE
        run: |
          STACK_NAME=real-time-stack
          STATUS=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query "Stacks[0].StackStatus" \
            --output text 2>&1 || echo "NOT_FOUND")

          echo "Estado actual del stack: $STATUS"

          if [[ "$STATUS" == *"ROLLBACK_COMPLETE"* || "$STATUS" == *"ROLLBACK_FAILED"* || "$STATUS" == *"UPDATE_ROLLBACK_COMPLETE"* ]]; then
          echo "Eliminando stack $STACK_NAME en estado $STATUS ..."
          aws cloudformation delete-stack --stack-name $STACK_NAME
          echo "Esperando que el stack se elimine..."
          aws cloudformation wait stack-delete-complete --stack-name $STACK_NAME
          echo "Stack eliminado"
          fi
      
      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file iac/infra-secundaria.yml \
            --stack-name real-time-stack \
            --parameter-overrides LambdaCodeS3Bucket=$BUCKET_NAME LambdaCodeS3Key=kinesis_timestream.zip
