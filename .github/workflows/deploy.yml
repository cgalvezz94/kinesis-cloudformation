name: CI/CD Pipeline

permissions:
    id-token: write
    contents: read

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  ### ðŸ”¹ CI: Testing & Validation
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest flake8

      - name: Run Linter
        run: |
          flake8 app/ --max-line-length=100

      #- name: Run Unit Tests
      #  run: |
      #    pytest app/tests/ --disable-warnings -q

  ### ðŸ”¹ CD: Deploy Infra + Lambda Code
  cd:
    needs: ci   # <- CD solo corre si CI pasa
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::302263066270:role/streaming-data-crypto
          aws-region: us-east-1

      - name: List repo files
        run: ls -R

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # ðŸŸ¢ Terraform despliega la infraestructura que incluye el bucket
      - name: Terraform Init
        working-directory: iac/terraform/
        run: terraform init

      - name: Terraform Validate
        working-directory: iac/terraform/
        run: terraform validate

      - name: Terraform Plan
        working-directory: iac/terraform/
        run: terraform plan -target=module.infra-basica -out=tfplan-basica
      
      - name: Terraform Apply (infra-basica)
        working-directory: iac/terraform/
        run: terraform apply -auto-approve tfplan-basica
      
      - name: Wait for S3 bucket to exist
        working-directory: iac/terraform/
        run: |
          BUCKET_NAME=$(terraform output -raw lambda_s3_bucket_name)
          echo "Esperando a que el bucket $BUCKET_NAME exista..."
          aws s3api wait bucket-exists --bucket $BUCKET_NAME

      - name: Echo bucket name
        working-directory: iac/terraform/
        run: |
          BUCKET_NAME=$(terraform output -raw lambda_s3_bucket_name)
          echo "Bucket name is: $BUCKET_NAME"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt -t package/
          cp lambda_handlers/kinesis_to_timestream.py package/

      - name: Package Lambda Code
        run: |
          zip -r kinesis_to_timestream.zip package/

      - name: Validate package contents
        run: |
          unzip -l kinesis_to_timestream.zip

      - name: Upload Lambda Package to S3
        working-directory: iac/terraform/
        run: |
          BUCKET_NAME=$(terraform output -raw lambda_s3_bucket_name)
          aws s3 cp kinesis_to_timestream.zip s3://$BUCKET_NAME/kinesis_to_timestream.zip

      - name: Wait for Lambda zip to exist
        working-directory: iac/terraform/
        run: |
          BUCKET_NAME=$(terraform output -raw lambda_s3_bucket_name)
          aws s3api wait object-exists --bucket $BUCKET_NAME --key kinesis_to_timestream.zip


      ### ðŸ”µ Fase 3: Crear Lambda y recursos secundarios
      - name: Terraform Plan (infra-secundaria)
        working-directory: iac/terraform/
        run: terraform plan -target=module.infra-secundaria -out=tfplan-secundaria

      - name: Terraform Apply (infra-secundaria)
        working-directory: iac/terraform/
        run: terraform apply -auto-approve tfplan-secundaria

      - name: Login to Amazon ECR Public
        run: |
          aws ecr-public get-login-password --region us-east-1 \
          | docker login --username AWS --password-stdin public.ecr.aws

      - name: Build Docker image
        run: docker build -t binance-trades .

      - name: Tag Docker image
        run: docker tag binance-trades:latest public.ecr.aws/l1v8h9k1/binance-trades:latest

      - name: Push Docker image to ECR Public
        run: docker push public.ecr.aws/l1v8h9k1/binance-trades:latest


      
